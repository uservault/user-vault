{
  "name": "creditcards-types",
  "version": "1.2.0",
  "description": "Card type definitions and methods for creditcards",
  "main": "./src/index.js",
  "scripts": {
    "test": "tape test/index.js | tap-spec"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bendrucker/creditcards-types.git"
  },
  "keywords": [
    "credit",
    "cards",
    "validation"
  ],
  "author": {
    "name": "Ben Drucker",
    "email": "bvdrucker@gmail.com",
    "url": "http://www.bendrucker.me/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bendrucker/creditcards-types/issues"
  },
  "homepage": "https://github.com/bendrucker/creditcards-types",
  "dependencies": {
    "xtend": "~4.0.0"
  },
  "devDependencies": {
    "tap-spec": "~2.2.1",
    "tape": "~3.5.0"
  },
  "readme": "# creditcards-types [![Build Status](https://travis-ci.org/bendrucker/creditcards-types.svg?branch=master)](https://travis-ci.org/bendrucker/creditcards-types)\n\nCard type definitions and methods used by [creditcards](https://github.com/bendrucker/creditcards), a JS library for all platforms for parsing, validating, and formatting credit card data. \n\n## Card Types\n\n* Visa\n* MasterCard\n* American Express\n* Diners Club\n* Discover\n* JCB\n* UnionPay\n* Maestro\n* Forbrugsforeningen\n* Dankort\n\nVisa Electron cards will validate and match as regular Visa cards.\n\n[Open an issue](https://github.com/bendrucker/creditcards-types/issues/new) if you need a type that's missing.\n\n## Installing\n\n```sh\nnpm install creditcards-types\n```\n\n## API\n\nCard types are exposed under `types`.\n\nEach type provides:\n\n* `pattern` (RegEx): A regular expression for validating a full card number.\n* `eagerPattern` (RegEx): A regular expression for guessing the card number from a partial number.\n* `groupPattern` (RegEx): A regular expression for separating the card number into formatting groups.\n* `cvcLength` (Number): The length of the CVC expected for the card type.\n* `luhn` (Boolean): Setting for whether a valid card number will pass a [Luhn check](http://en.wikipedia.org/wiki/Luhn_algorithm). Defaults to `true` and is only false for UnionPay.\n\nEach type also provides the methods listed below. `number` must always be a `String` without any punctuation or spaces.\n\n##### `type.test(number, eager)` -> `Boolean`\n\n`type.test` receives a card `number` and an `eager` setting (`Boolean`).`eager` is `false` by default and defines whether the `number` will be checked against the `eagerPattern` or the full validation `pattern`. `type.test` returns a `Boolean` indicating whether or not the specified `number` passes for the given `type`. \n\n```js\nvar types = require('creditcards-types').types;\nvar visa  = types.visa;\n\n// Strict type validation\nvisa.test('4242424242424242'); // => true\n\n// Eager type checking\nvisa.test('42', true); // => true\n```\n\n##### `type.group(number)` -> `Array`\n\n`type.group` separates the given card `number` into formatting groups. It can receive either a partial or complete card number. If the `number` exceeds the valid length for the card, any digits past the maximum length are discarded.\n\n```js\nvar visa = types.visa;\n// Full groups\nvisa.group('4242424242424242'); // => ['4242', '4242', '4242', '4242']\n\n// Partial groups\nvisa.group('424242'); // => ['4242', '42']\n```\n",
  "readmeFilename": "README.md",
  "_id": "creditcards-types@1.2.0",
  "dist": {
    "shasum": "654ade7625222685432908e79b21db328b64ded9"
  },
  "_from": "creditcards-types@~1.2.0",
  "_resolved": "https://registry.npmjs.org/creditcards-types/-/creditcards-types-1.2.0.tgz"
}
