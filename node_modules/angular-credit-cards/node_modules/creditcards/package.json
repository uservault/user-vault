{
  "name": "creditcards",
  "version": "1.5.0",
  "description": "Utility methods for formatting and validating credit cards",
  "main": "./src",
  "scripts": {
    "test": "standard && istanbul cover node_modules/.bin/_mocha -- ./test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bendrucker/creditcards.git"
  },
  "keywords": [
    "credit",
    "cards",
    "validation",
    "formatting"
  ],
  "author": {
    "name": "Ben Drucker",
    "email": "bvdrucker@gmail.com",
    "url": "http://www.bendrucker.me/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bendrucker/creditcards/issues"
  },
  "homepage": "https://github.com/bendrucker/creditcards",
  "devDependencies": {
    "chai": "1",
    "istanbul": "0",
    "mocha": "1",
    "standard": "~3.6.1"
  },
  "dependencies": {
    "camel-case": "0.1",
    "creditcards-types": "~1.2.0",
    "fast-luhn": "~1.0.1"
  },
  "readme": "creditcards [![Build Status](https://travis-ci.org/bendrucker/creditcards.svg?branch=master)](https://travis-ci.org/bendrucker/creditcards) [![Code Climate](https://codeclimate.com/github/bendrucker/creditcards/badges/gpa.svg)](https://codeclimate.com/github/bendrucker/creditcards) [![Test Coverage](https://codeclimate.com/github/bendrucker/creditcards/badges/coverage.svg)](https://codeclimate.com/github/bendrucker/creditcards) [![NPM version](https://badge.fury.io/js/creditcards.svg)](http://badge.fury.io/js/creditcards)\n============\n\nUtility methods for formatting and validating credit cards. With a minimal footprint and a flexible API, it's suitable for both Node and the browser.\n\n## Install\n```bash\n# npm\n$ npm install creditcards\n# bower\n$ bower install creditcards\n``` \n\n## API\n\n#### `validate(card)`\n\n* Arguments:\n  * `card` (object)\n    * `number` (string)\n    * `expirationMonth` (number)\n    * `expirationYear` (number)\n    * `cvc` (string)\n* Returns:\n  * object\n    * `card`\n      * `type` (string) - the [type](#cardtypenumber---string) of the provided card\n      * `number` (string)\n      * `expirationMonth` (number)\n      * `expirationYear` (number)\n      * `cvc` (string)\n    * `validCardNumber` (boolean)\n    * `validExpirationMonth` (boolean)\n    * `validExpirationYear` (boolean)\n    * `validCvc` (boolean)\n    * `expired` (boolean) - whether the expiration date has passed\n\n## `card`\n\n#### `card.parse(number)` -> `String`\nRemoves all non-numeric characters from a card number, including punctuation and spacing. If a non-string is provided, it returns an empty string.\n\n---\n\n#### `card.format(number [, separator])` -> `String`\n\nFormats a card number depending on the card type using the `separator`, defaulting to a space. \n\n* `card.format('4242424242424242') === '4242 4242 4242 4242'` (Visa)\n* `card.format('378282246310005') === '3782 822463 10005'` (American Express) \n\n---\n\n#### `card.type(number [, eager])` -> `String`\n\nReturns the matched card type, or `undefined` if there was no match. If `eager` is `true` (it defaults to `false`), `card.type` will match against a partial number. `'42'`, for example, will match `'Visa'` with `eager` set to `true`.\n\n`number` must be a string and may not have spaces or punctuation. Use [`card.parse`](#cardparsenumber---string) to sanitize user input before passing a `number` to `card.type`. \n\nFor a full list of supported card types, see [`creditcards-types`](https://github.com/bendrucker/creditcards-types#card-types).\n\n---\n\n#### `card.luhn(number)` -> `Boolean`\nChecks the card number's validity using the [Luhn algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm).\n\n#### `card.isValid(number [, type])` -> `Boolean`\nValidates the number using `card.luhn` and checks that it matches any [`type`](#cardtypenumber---string) (or a specific `type` if provided). \n\n## `cvc`\n\n#### `isValid(cvc [, type])` -> `Boolean`\nChecks whether a card verification code is a valid 3-4 digit numeric string. If a [`type`](#cardtypenumber---string) is provided, the length will be validated for the card type (4 for American Express, 3 for others).\n\n## `expiration`\n\n#### `isPast(month, year)` -> `Boolean`\nChecks whether a given month and year pair (both `Number`) are in the past.\n\n---\n\n### `expiration.month`\n\n#### `expiration.month.parse(month)` -> `Number`\nCasts the provided `month` value to a `Number`. All of the following will be `5` after parsing: \n* `5`\n* `'05'`\n* `'5'`\n\nReturns `undefined` for non-numeric values.\n\n---\n\n#### `expiration.month.isValid(month)` -> `Boolean`\nChecks whether the provided month (`Number`) is valid (between 1 and 12).\n\n---\n\n### `expiration.year`\n\n#### `expiration.year.parse(year [, pad])` -> `Number`\nCasts the provided year value to  a `Number`. If `pad` is `true`, `year` is assumed to be a two digit number or numeric string. All of the following are equivalent: \n* `expiration.year.parse(2014)`\n* `expiration.year.parse('2014')`\n* `expiration.year.parse('14', true)`\n* `expiration.year.parse(14, true)`\n\nReturns `undefined` for non-numeric values.\n\n---\n\n#### `expiration.year.format(year [, strip])` -> `Number`\nCasts the provided year (`Number`) to  a `String`. If `strip` is `true`, `year` is assumed to be a four digit number and will be converted to a two digit number. \n* `expiration.year.format(2014) === '2014'`\n* `expiration.year.format(2014, true) === '14'`\n\n---\n\n#### `expiration.year.isValid(year)` -> `Boolean`\nChecks whether the provided year (`Number`) is valid (> 0).\n\n---\n\n#### `expiration.year.isPast(year)` -> `Boolean`\nChecks whether a given year (`Number`) is in the past.\n\n## Why Another Library?\nThere are lots of other useful credit card validation and parsing modules. creditcards specifically takes inspiration from [credit-card](https://www.npmjs.org/package/credit-card), but there are [many others](https://www.npmjs.org/search?q=credit%20card), including the popular [jQuery.payment](https://github.com/stripe/jquery.payment). creditcards was specifically designed for browser use for handling payment forms. That means:\n\n1. Browserified, it's only a few kilobytes, even before minification.\n2. It provides an API for parsing user inputs.\n3. It has no DOM-related code. You can use it in Node and in the browser you get full control over how your card inputs are handled.\n4. The card type is optional.\n\n## Clients\n\n* [angular-credit-cards](https://github.com/bendrucker/angular-credit-cards): A set of Angular directives for building credit card forms powered by creditcards\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "creditcards@1.5.0",
  "dist": {
    "shasum": "d324f14d4788a6177d89d26523f218aeef115f0c"
  },
  "_from": "creditcards@~1.5.0",
  "_resolved": "https://registry.npmjs.org/creditcards/-/creditcards-1.5.0.tgz"
}
